---

- name: create certificate application config
  template: >
    src=certs.env.json.j2
    dest={{ certs_app_dir }}/env.json
  sudo_user: "{{ certs_user }}"

- name: create certificate auth file
  template: >
    src=certs.auth.json.j2
    dest={{ certs_app_dir }}/auth.json
  sudo_user: "{{ certs_user }}"

- name: writing supervisor script for certificates
  template: >
    src=certs.conf.j2 dest={{ supervisor_available_dir }}/certs.conf
    owner={{ supervisor_user }} mode=0644

- name: enable supervisor script for certificates
  file: >
    src={{ supervisor_available_dir }}/certs.conf
    dest={{ supervisor_cfg_dir }}/certs.conf
    owner={{ supervisor_user }}
    state=link
    force=yes
    mode=0644
  when: not disable_edx_services

- name: create ssh script for git
  template: >
    src={{ certs_git_ssh|basename }}.j2 dest={{ certs_git_ssh }}
    owner={{ certs_user }} mode=750

# This key is only needed if you are pulling down a private
# certificates repo
- name: install read-only ssh key for the certs repo
  copy: >
    content="{{ CERTS_GIT_IDENTITY }}" dest={{ certs_git_identity }}
    force=yes owner={{ certs_user }} mode=0600
  when: CERTS_GIT_IDENTITY != "none"

- name: checkout certificates repo into {{ certs_code_dir }}
  git_2_0_1: >
    dest={{ certs_code_dir }} repo={{ CERTS_REPO }} version={{ certs_version }}
    accept_hostkey=yes
  sudo_user: "{{ certs_user }}"
  environment:
    GIT_SSH: "{{ certs_git_ssh }}"
  register: certs_checkout
  when: CERTS_GIT_IDENTITY != "none"

- name: checkout certificates repo into {{ certs_code_dir }}
  git_2_0_1: >
    dest={{ certs_code_dir }} repo={{ CERTS_REPO }} version={{ certs_version }}
    accept_hostkey=yes
  sudo_user: "{{ certs_user }}"
  register: certs_checkout
  when: CERTS_GIT_IDENTITY == "none"

- name: remove read-only ssh key for the certs repo
  file: path={{ certs_git_identity }} state=absent
  when: CERTS_GIT_IDENTITY != "none"

- name : install python requirements
  pip: >
    requirements="{{ certs_requirements_file }}" virtualenv="{{ certs_venv_dir }}" state=present
    extra_args="-i {{ COMMON_PYPI_MIRROR_URL }}"
  sudo_user: "{{ certs_user }}"

  # call supervisorctl update. this reloads
  # the supervisorctl config and restarts
  # the services if any of the configurations
  # have changed.
  #
- name: update supervisor configuration
  shell:  "{{ supervisor_ctl }} -c {{ supervisor_cfg }} update"
  register: supervisor_update
  sudo_user: "{{ supervisor_service_user }}"
  changed_when: supervisor_update.stdout is defined and supervisor_update.stdout != ""
  when: not disable_edx_services

- name: ensure certs has started
  supervisorctl: >
    name=certs
    supervisorctl_path={{ supervisor_ctl }}
    config={{ supervisor_cfg }}
    state=started
  sudo_user: "{{ supervisor_service_user }}"
  when: not disable_edx_services

- name: create a symlink for venv python
  file: >
    src="{{ certs_venv_bin }}/{{ item }}"
    dest={{ COMMON_BIN_DIR }}/{{ item }}.certs
    state=link
  with_items:
  - python
  - pip

- include: tag_ec2.yml tags=deploy
  when: COMMON_TAG_EC2_INSTANCE

- name: restart certs
  supervisorctl: >
    name=certs
    supervisorctl_path={{ supervisor_ctl }}
    config={{ supervisor_cfg }}
    state=restarted
  when: not disable_edx_services
